{"version":3,"file":"Button.js","sourceRoot":"","sources":["src/Button.tsx"],"names":[],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport React from \"react\";\nimport * as colors from \"./colors\";\nimport * as CSS from \"csstype\";\nimport { base } from \"./typography\";\n\n// Types that could use some improvement:\n// * Don't allow `children` and `icon` to be missing\n// * Don't allow `children` when `FAB`\n//\n// I was able to get guarantees to work, but only with very cryptic errors. I\n// decided it'd be best, for the time being, to `throw` if we use things\n// incorrectly.\ninterface Props {\n  /**\n   * Background color to show in a non-disabled, non-active state\n   */\n  backgroundColor?: CSS.BackgroundColorProperty;\n\n  /**\n   * Background color to show when button is being hovered over and is not disabled\n   */\n  hoverBackgroundColor?: CSS.BackgroundColorProperty;\n\n  /**\n   * The content to show inside the button\n   *\n   * When using an icon, use the `icon` prop instead.\n   */\n  children?: React.ReactNode;\n\n  /**\n   * Class name to passthrough to the top level component\n   */\n  className?: string;\n\n  /**\n   * Disable the button\n   *\n   * This will prevent all clicks and will show the button in a different color\n   */\n  disabled?: boolean;\n\n  /**\n   * Background color to display when the button is disabled\n   */\n  disabledBackgroundColor?: CSS.BackgroundColorProperty;\n\n  /**\n   * Text color to display when the button is disabled\n   */\n  disabledTextColor?: CSS.BackgroundColorProperty;\n\n  /**\n   * Treat this button as a floating action button\n   *\n   * You must include an `icon` prop and you must _not_ include a `children`\n   * prop for a floating action button.\n   */\n  fab?: boolean;\n\n  /**\n   * Force the button to be in the active state.\n   *\n   * Useful for Storybook\n   *\n   * @ignore\n   */\n  forceActiveState?: boolean;\n\n  /**\n   * Force the button to be in the focus state.\n   *\n   * Useful for Storybook\n   *\n   * @ignore\n   */\n  forceFocusState?: boolean;\n\n  /**\n   * Force the button to be in the hover state.\n   *\n   * Useful for Storybook\n   *\n   * @ignore\n   */\n  forceHoverState?: boolean;\n\n  /**\n   * A hidden button will have no background\n   *\n   * You should configure the `hiddenActiveBackgroundColor` prop if you are\n   * using any custom colors.\n   */\n  hidden?: boolean;\n\n  /**\n   * Color to make the background for a hidden button that is active.\n   *\n   * This color should be darker than the `hoverBackgroundColor`.\n   *\n   * This should not be used for a non-hidden button.\n   */\n  hiddenActiveBackgroundColor?: CSS.BackgroundColorProperty;\n\n  /**\n   * Color to make the text for a focused hidden button.\n   *\n   * This should not be used for a non-hidden button.\n   */\n  hiddenFocusedColor?: CSS.ColorProperty;\n\n  /**\n   * Either an icon to show to the left of the button text, or on it's own\n   */\n  icon?: React.ReactElement;\n\n  /**\n   * Size of the button\n   *\n   * Defaults to \"default\"\n   */\n  size?: \"default\" | \"small\" | \"large\";\n\n  /**\n   * CSS styles to apply\n   *\n   * @ignore\n   */\n  style?: React.CSSProperties;\n}\n\n/**\n * Style system for Space Kit buttons\n *\n * This is intended to be used as an abstraction for your project's style guide.\n * There are way too many configuration options to use this component directly.\n *\n * @see https://zpl.io/amdN6Pr\n */\nexport const Button: React.FC<Props> = ({\n  backgroundColor = colors.silver.light,\n  children,\n  disabled = false,\n  disabledBackgroundColor = colors.silver.dark,\n  disabledTextColor = colors.grey.light,\n  fab = false,\n  forceActiveState = false,\n  forceFocusState = false,\n  forceHoverState = false,\n  hidden = false,\n  hiddenActiveBackgroundColor = colors.silver.dark,\n  hiddenFocusedColor = colors.blue.base,\n  hoverBackgroundColor = colors.silver.base,\n  icon,\n  size = \"default\",\n  ...otherProps\n}) => {\n  /**\n   * Icon size in pixels\n   *\n   * This is stored so we can use the same value for `height` and `width`\n   */\n  const iconSize = size === \"small\" ? 12 : size === \"large\" ? 24 : 16;\n\n  const iconOnly = !children;\n\n  if (fab) {\n    if (!icon) {\n      throw new TypeError(\"FAB buttons are required to have an `icon`\");\n    } else if (children) {\n      throw new TypeError(\"FAB buttons cannot have children, only an `icon`\");\n    }\n  }\n\n  if (forceActiveState && forceHoverState) {\n    throw new TypeError(\n      \"Do not force multiple properties at once, you will get indeterminiate behavior\"\n    );\n  }\n\n  // We're storing this because it can be used for the `:active` style or when\n  // `forceActiveState` is used in Storybook\n  const activeProperties = {\n    ...(hidden\n      ? { backgroundColor: hiddenActiveBackgroundColor }\n      : {\n          // The `box-shadow` property is copied directly from Zeplin\n          boxShadow:\n            \"inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05), inset 0 2px 2px 0 rgba(18, 21, 26, 0.12)\"\n        }),\n    outline: 0\n  };\n\n  // We're storing this because it can be used for the `:hover` style or when\n  // `forceHoverState` is used in Storybook\n  const hoverProperties = {\n    backgroundColor: hoverBackgroundColor,\n    cursor: \"pointer\",\n    ...(!hidden && {\n      // The `box-shadow` property is copied directly from Zeplin\n      boxShadow:\n        \"0 5px 10px 0 rgba(18, 21, 26, 0.12), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\"\n    })\n  };\n\n  // We're storing this because it can be used for the `:focus` style or when\n  // `forceFocusState` is used in Storybook\n  const focusProperties = {\n    // The `box-shadow` property is copied directly from Zeplin\n    boxShadow:\n      \"0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 0 0 2px #bbdbff, inset 0 0 0 1px #2075d6, inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\",\n    ...(hidden && { color: `${hiddenFocusedColor} !important` })\n  };\n\n  return (\n    <button\n      {...otherProps}\n      css={{\n        appearance: \"button\",\n        backgroundColor: hidden\n          ? \"transparent\"\n          : disabled\n          ? disabledBackgroundColor\n          : backgroundColor,\n        borderRadius: fab ? \"100%\" : 4,\n        borderWidth: 0,\n        ...(!hidden && {\n          boxShadow:\n            \"0 1px 4px 0 rgba(18, 21, 26, 0.08), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\"\n        }),\n        minWidth: iconOnly\n          ? size === \"small\"\n            ? 28\n            : size === \"large\"\n            ? 42\n            : 36\n          : size === \"small\"\n          ? 76\n          : size === \"large\"\n          ? 112\n          : 100,\n        padding: size === \"small\" ? `5px 8px` : size === \"large\" ? 8 : 7,\n        ...(size === \"small\"\n          ? base.small\n          : size === \"large\"\n          ? base.large\n          : base.base),\n        ...(!disabled &&\n          (forceHoverState\n            ? hoverProperties\n            : {\n                \":hover\": hoverProperties\n              })),\n        fontWeight: 600,\n        // Disable the outline because we're setting a custom `:active` style\n        outline: 0,\n        ...(disabled && { color: `${disabledTextColor} !important` }),\n        ...(!disabled &&\n          (forceFocusState ? focusProperties : { \":focus\": focusProperties })),\n        // This must come after `:focus` or the `:focus` state will override `:active`\n        ...(!disabled && forceActiveState\n          ? activeProperties\n          : { \":active\": activeProperties })\n      }}\n    >\n      <div\n        css={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        }}\n      >\n        {icon && (\n          <span\n            css={{\n              display: \"inline-block\",\n              width: iconSize,\n              height: iconSize,\n              margin: iconOnly ? \"3px 0\" : \"0 4px 0\"\n            }}\n          >\n            {icon}\n          </span>\n        )}\n        {children && <span>{children}</span>}\n      </div>\n    </button>\n  );\n};\n"]}