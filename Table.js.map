{"version":3,"file":"Table.js","sourceRoot":"","sources":["src/Table.tsx"],"names":[],"mappings":";;;AACA,sCAAgD;AAEhD,+DAA2C;AAC3C,uDAAmC;AAgCnC,SAAgB,KAAK,CAAW,EAId;QAHhB,cAAI,EACJ,eAAoB,EAApB,yCAAoB,EACpB,oBAAO;IAEP,IAAM,OAAO,GAAG,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAE9E,OAAO,CACL,sBACE,GAAG,EAAE;YACH,cAAc,EAAE,UAAU;YAC1B,KAAK,EAAE,MAAM;SACd;QAED;YACE,mBACE,GAAG,EAAE;oBACH,YAAY,EAAE,eAAa,MAAM,CAAC,MAAM,CAAC,IAAM;iBAChD,IAEA,OAAO,CAAC,GAAG,CAAC,UAAC,EAAe,EAAE,KAAK;oBAApB,4BAAW;gBAAc,OAAA,CACvC,mBACE,GAAG,EAAE,KAAK,EACV,GAAG,uBACE,UAAU,CAAC,IAAI,CAAC,MAAM,IACzB,aAAa,EAAE,WAAW,EAC1B,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,EACzB,UAAU,EAAE,GAAG,EACf,SAAS,EAAE,MAAM,EACjB,OAAO,SAAA,OAGR,WAAW,CACT,CACN;YAdwC,CAcxC,CAAC,CACC,CACC;QACR,0BACG,IAAI,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,OAAA,CACzB,mBAAI,GAAG,EAAE,KAAK,IACX,OAAO,CAAC,GAAG,CACV,UAAC,EAEA,EAAE,QAAQ;gBADT,kBAAM;YACQ,OAAA,CACd,mBACE,GAAG,EAAE,QAAQ,EACb,GAAG,EAAE;oBAEH,YAAY,EAAE,KAAK,KAAK,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAA,CAAC,CAAC,eAAa,MAAM,CAAC,MAAM,CAAC,IAAM;oBACjF,OAAO,SAAA;iBACR,IACD,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAM,CAClC;QATe,CASf,CACF,CACE,CACN,EAjB0B,CAiB1B,CAAC,CACI,CACF,CACT,CAAC;AACJ,CAAC;AA3DD,sBA2DC","sourcesContent":["/** @jsx jsx */\nimport { jsx, ClassNames } from \"@emotion/core\";\nimport React, { HTMLAttributes } from \"react\";\nimport * as typography from \"./typography\";\nimport * as colors from \"./colors\";\n\ninterface Props<RowShape> {\n  /**\n   * All the data for the component. Should be stored in an array of objects\n   */\n  data: RowShape[];\n\n  density?: \"standard\" | \"condensed\" | \"relaxed\";\n\n  /**\n   * An array of column definitions\n   */\n  columns: Array<{\n    /**\n     * Title to add to the table header\n     */\n    headerTitle?: React.ReactNode | string;\n\n    /**\n     * A method that accepts the data for the row and returns the inner content for the row.\n     *\n     * Do not include a `<tr>` or a `<td>`, these are handled automatically\n     */\n    render: (\n      input: Readonly<RowShape>,\n      index: number,\n      list: ReadonlyArray<RowShape>\n    ) => React.ReactNode;\n  }>;\n}\n\nexport function Table<RowShape>({\n  data,\n  density = \"standard\",\n  columns\n}: Props<RowShape>): ReturnType<React.FC> {\n  const padding = density === \"standard\" ? 8 : density === \"condensed\" ? 3 : 11;\n\n  return (\n    <table\n      css={{\n        borderCollapse: \"collapse\",\n        width: \"100%\",\n      }}\n    >\n      <thead>\n        <tr\n          css={{\n            borderBottom: `1px solid ${colors.silver.dark}`\n          }}\n        >\n          {columns.map(({ headerTitle }, index) => (\n            <th\n              key={index}\n              css={{\n                ...typography.base.xsmall,\n                textTransform: \"uppercase\",\n                color: colors.grey.darker,\n                fontWeight: 600,\n                textAlign: \"left\",\n                padding\n              }}\n            >\n              {headerTitle}\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((item, index) => (\n          <tr key={index}>\n            {columns.map(\n              ({\n                render\n              }, rowIndex) => (\n                <td \n                  key={rowIndex}\n                  css={{\n                    // no border on the bottom row\n                    borderBottom: index === data.length-1 ? `none`: `1px solid ${colors.silver.dark}`,\n                    padding\n                  }}\n                >{render(item, index, data)}</td>\n              )\n            )}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n"]}